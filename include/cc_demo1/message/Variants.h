// Generated by commsdsl2comms v7.0.3

/// @file
/// @brief Contains definition of <b>"Variants"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_demo1/MsgId.h"
#include "cc_demo1/field/FieldBase.h"
#include "cc_demo1/field/PropRemLen.h"
#include "cc_demo1/message/VariantsCommon.h"
#include "cc_demo1/options/DefaultOptions.h"
#include "comms/Assert.h"
#include "comms/CompileControl.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/field/String.h"
#include "comms/field/Variant.h"
#include "comms/options.h"

namespace cc_demo1
{

namespace message
{

/// @brief Fields of @ref Variants.
/// @tparam TOpt Extra options
/// @see @ref Variants
/// @headerfile cc_demo1/message/Variants.h
template <typename TOpt = cc_demo1::options::DefaultOptions>
struct VariantsFields
{
    /// @brief Scope for all the member fields of
    ///     @ref Props1 field.
    struct Props1Members
    {
        /// @brief Scope for all the member fields of
        ///     @ref Property field.
        struct PropertyMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref Prop1 field.
            struct Prop1Members
            {
                /// @brief Definition of <b>"Key"</b> field.
                class Key : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<1>,
                        comms::option::def::ValidNumValue<1>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<1>,
                            comms::option::def::ValidNumValue<1>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop1MembersCommon::KeyCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop1MembersCommon::KeyCommon::name();
                    }
                };

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::int16_t,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop1MembersCommon::ValCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop1MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Key,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop1"</b> field.
            class Prop1 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop1Members::All,
                    comms::option::def::HasName,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop1Members::All,
                        comms::option::def::HasName,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop1Members::Key member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop1Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    key,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop1Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Prop2 field.
            struct Prop2Members
            {
                /// @brief Definition of <b>"Key"</b> field.
                class Key : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<2>,
                        comms::option::def::ValidNumValue<2>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<2>,
                            comms::option::def::ValidNumValue<2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop2MembersCommon::KeyCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop2MembersCommon::KeyCommon::name();
                    }
                };

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint32_t,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop2MembersCommon::ValCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop2MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Key,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop2"</b> field.
            class Prop2 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop2Members::All,
                    comms::option::def::HasName,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop2Members::All,
                        comms::option::def::HasName,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop2Members::Key member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop2Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    key,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop2Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Prop3 field.
            struct Prop3Members
            {
                /// @brief Definition of <b>"Key"</b> field.
                class Key : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<3>,
                        comms::option::def::ValidNumValue<3>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<3>,
                            comms::option::def::ValidNumValue<3>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3MembersCommon::KeyCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3MembersCommon::KeyCommon::name();
                    }
                };

                /// @brief Scope for all the member fields of
                ///     @ref Val field.
                struct ValMembers
                {
                    /// @brief Definition of <b>"Length"</b> field.
                    class Length : public
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName
                        >
                    {
                        using Base =
                            comms::field::IntValue<
                                cc_demo1::field::FieldBase<>,
                                std::uint8_t,
                                comms::option::def::HasName
                            >;
                    public:
                        /// @brief Re-definition of the value type.
                        using ValueType = typename Base::ValueType;

                        /// @brief Compile time detection of special values presence.
                        static constexpr bool hasSpecials()
                        {
                            return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3MembersCommon::ValMembersCommon::LengthCommon::hasSpecials();
                        }

                        /// @brief Name of the field.
                        static const char* name()
                        {
                            return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3MembersCommon::ValMembersCommon::LengthCommon::name();
                        }
                    };
                };

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::String<
                        cc_demo1::field::FieldBase<>,
                        typename TOpt::message::VariantsFields::Props1Members::PropertyMembers::Prop3Members::Val,
                        comms::option::def::HasName,
                        comms::option::def::SequenceSerLengthFieldPrefix<typename ValMembers::Length>
                    >
                {
                    using Base =
                        comms::field::String<
                            cc_demo1::field::FieldBase<>,
                            typename TOpt::message::VariantsFields::Props1Members::PropertyMembers::Prop3Members::Val,
                            comms::option::def::HasName,
                            comms::option::def::SequenceSerLengthFieldPrefix<typename ValMembers::Length>
                        >;
                public:
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Key,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop3"</b> field.
            class Prop3 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop3Members::All,
                    comms::option::def::HasName,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop3Members::All,
                        comms::option::def::HasName,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop3Members::Key member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop3Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    key,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyMembersCommon::Prop3Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Prop1,
                   Prop2,
                   Prop3
                >;
        };

        /// @brief Definition of <b>"Property"</b> field.
        class Property : public
            comms::field::Variant<
                cc_demo1::field::FieldBase<>,
                typename PropertyMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasCustomRead,
                comms::option::def::HasCustomWrite,
                comms::option::def::HasCustomRefresh,
                comms::option::def::VariantHasCustomResetOnDestruct,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Variant<
                    cc_demo1::field::FieldBase<>,
                    typename PropertyMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::HasCustomRead,
                    comms::option::def::HasCustomWrite,
                    comms::option::def::HasCustomRefresh,
                    comms::option::def::VariantHasCustomResetOnDestruct,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Default constructor.
            Property() = default;

            /// @brief Destructor
            ~Property()
            {
                reset();
            }

            /// @brief Single member name info entry
            using MemberNameInfo = cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::MemberNameInfo;

            /// @brief Type returned from @ref memberNamesMap() member function.
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::MemberNamesMapInfo.
            using MemberNamesMapInfo = cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::MemberNamesMapInfo;

            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
            ///     related to @b comms::field::Variant class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_prop1 index, @b Field_prop1 type,
            ///         @b initField_prop1(), @b deinitField_prop1() and @b accessField_prop1() access functions -
            ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop1 member field.
            ///     @li @b FieldIdx_prop2 index, @b Field_prop2 type,
            ///         @b initField_prop2(), @b deinitField_prop2() and @b accessField_prop2() access functions -
            ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop2 member field.
            ///     @li @b FieldIdx_prop3 index, @b Field_prop3 type,
            ///         @b initField_prop3(), @b deinitField_prop3() and @b accessField_prop3() access functions -
            ///         for cc_demo1::message::VariantsFields::Props1Members::PropertyMembers::Prop3 member field.
            COMMS_VARIANT_MEMBERS_NAMES(
                prop1,
                prop2,
                prop3
            );

            /// @brief Copy constructor.
            Property(const Property& other) :
                Base()
            {
                *this = other;
            }

            /// @brief Move constructor.
            Property(Property&& other) : 
                Base()
            {
                *this = std::move(other);
            }

            /// @brief Copy assignment operator.
            Property& operator=(const Property& other)
            {
                if (this == &other) {
                    return *this;
                }

                reset();

                if (!other.currentFieldValid()) {
                    return *this;
                }

                switch (other.currentField()) {
                    case FieldIdx_prop1: initField_prop1() = other.accessField_prop1(); return *this;
                    case FieldIdx_prop2: initField_prop2() = other.accessField_prop2(); return *this;
                    case FieldIdx_prop3: initField_prop3() = other.accessField_prop3(); return *this;
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return *this;
            }

            /// @brief Move assignement operator.
            Property& operator=(Property&& other)
            {    if (this == &other) {
                    return *this;
                }

                reset();

                if (!other.currentFieldValid()) {
                    return *this;
                }

                switch (other.currentField()) {
                    case FieldIdx_prop1: initField_prop1() = std::move(other.accessField_prop1()); return *this;
                    case FieldIdx_prop2: initField_prop2() = std::move(other.accessField_prop2()); return *this;
                    case FieldIdx_prop3: initField_prop3() = std::move(other.accessField_prop3()); return *this;
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return *this;
            }

            /// @brief Equality comparison operator.
            bool operator==(const Property& other) const
            {
                if (this == &other) {
                    return true;
                }

                if (Base::currentFieldValid() != other.currentFieldValid()) {
                    return false;
                }

                if (!Base::currentFieldValid()) {

                    return true;
                }

                if (Base::currentField() != other.currentField()) {
                    return false;
                }

                switch(Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1() == other.accessField_prop1();
                    case FieldIdx_prop2: return accessField_prop2() == other.accessField_prop2();
                    case FieldIdx_prop3: return accessField_prop3() == other.accessField_prop3();
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Inequality comparison operator.
            bool operator!=(const Property& other) const
            {
                return !(*this == other);
            }

            /// @brief Order comparison operator.
            bool operator<(const Property& other) const
            {
                if (!Base::currentFieldValid()) {
                    return (!other.currentFieldValid());
                }

                if (!other.currentFieldValid()) {
                    return false;
                }

                if (Base::currentField() < other.currentField()) {
                    return true;
                }

                if (Base::currentField() != other.currentField()) {
                    return false;
                }

                if (this == &other) {
                    return false;
                }
                switch(Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1() < other.accessField_prop1();
                    case FieldIdx_prop2: return accessField_prop2() < other.accessField_prop2();
                    case FieldIdx_prop3: return accessField_prop3() < other.accessField_prop3();
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Optimized currentFieldExec functionality.
            /// @details Replaces the currentFieldExec() member function defined
            ///    by @b comms::field::Variant.
            template <typename TFunc>
            void currentFieldExec(TFunc&& func) 
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1:
                        memFieldDispatch<FieldIdx_prop1>(accessField_prop1(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop2:
                        memFieldDispatch<FieldIdx_prop2>(accessField_prop2(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop3:
                        memFieldDispatch<FieldIdx_prop3>(accessField_prop3(), std::forward<TFunc>(func));
                        break;
                    default:
                        static constexpr bool Invalid_field_execution = false;
                        static_cast<void>(Invalid_field_execution);
                        COMMS_ASSERT(Invalid_field_execution);
                        break;
                }
            }

            /// @brief The same as currentFieldExec() 
            /// @details Generated for backward comatibility, can be removed in the future.
            template <typename TFunc>
            void currFieldExec(TFunc&& func) 
            {
                currentFieldExec(std::forward<TFunc>(func));
            }

            /// @brief Optimized currentFieldExec functionality (const variant).
            /// @details Replaces the currentFieldExec() member function defined
            ///    by @b comms::field::Variant.
            template <typename TFunc>
            void currentFieldExec(TFunc&& func) const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1:
                        memFieldDispatch<FieldIdx_prop1>(accessField_prop1(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop2:
                        memFieldDispatch<FieldIdx_prop2>(accessField_prop2(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop3:
                        memFieldDispatch<FieldIdx_prop3>(accessField_prop3(), std::forward<TFunc>(func));
                        break;
                    default:
                        static constexpr bool Invalid_field_execution = false;
                        static_cast<void>(Invalid_field_execution);
                        COMMS_ASSERT(Invalid_field_execution);
                        break;
                }
            }

            /// @brief The same as currentFieldExec()  (const variant)
            /// @details Generated for backward comatibility, can be removed in the future.
            template <typename TFunc>
            void currFieldExec(TFunc&& func) const
            {
                currentFieldExec(std::forward<TFunc>(func));
            }

            /// @brief Optimized runtime selection field functionality.
            /// @details Replaces the selectField() member function defined
            ///    by @b comms::field::Variant.
            void selectField(std::size_t idx)
            {
                if (Base::currentField() == idx) {
                    return;
                }

                reset();
                switch (idx) {
                    case FieldIdx_prop1: initField_prop1(); return;
                    case FieldIdx_prop2: initField_prop2(); return;
                    case FieldIdx_prop3: initField_prop3(); return;
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
            }

            /// @brief Optimized reset functionality.
            /// @details Replaces the reset() member function defined
            ///    by @b comms::field::Variant.
            void reset()
            {
                if (!Base::currentFieldValid()) {
                    return;
                }

                switch (Base::currentField()) {
                    case FieldIdx_prop1: deinitField_prop1(); return;
                    case FieldIdx_prop2: deinitField_prop2(); return;
                    case FieldIdx_prop3: deinitField_prop3(); return;
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
            }

            /// @brief Optimized check ability to write.
            /// @details Replaces the canWrite() member function defined
            ///    by @b comms::field::Variant.
            bool canWrite() const
            {
                if (!Base::currentFieldValid()) {
                    return true;
                }

                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().canWrite();
                    case FieldIdx_prop2: return accessField_prop2().canWrite();
                    case FieldIdx_prop3: return accessField_prop3().canWrite();
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Retrieve name of the member
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::memberName().
            static const char* memberName(std::size_t idx)
            {
                return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::memberName(idx);
            }

            /// @brief Retrieve name of the member
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::memberName().
            static const char* memberName(FieldIdx idx)
            {
                return memberName(static_cast<std::size_t>(idx));
            }

            /// @brief Retrieve map of members names
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::memberNamesMap().
            static MemberNamesMapInfo memberNamesMap()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::memberNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::PropertyCommon::name();
            }

            COMMS_MSVC_WARNING_PUSH
            COMMS_MSVC_WARNING_DISABLE(4702)
            /// @brief Generated read functionality.
            template <typename TIter>
            comms::ErrorStatus read(TIter& iter, std::size_t len)
            {
                reset();
                using CommonKeyField=
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue
                    >;
                CommonKeyField commonKeyField;

                auto origIter = iter;
                auto es = commonKeyField.read(iter, len);
                if (es != comms::ErrorStatus::Success) {
                    return es;
                }

                auto consumedLen = static_cast<std::size_t>(std::distance(origIter, iter));
                COMMS_ASSERT(consumedLen <= len);
                len -= consumedLen;

                switch (commonKeyField.getValue()) {
                    case 1U /* 0x01U */:
                        {
                            auto& field_prop1 = initField_prop1();
                            COMMS_ASSERT(field_prop1.field_key().getValue() == commonKeyField.getValue());
                            return field_prop1.template readFrom<1>(iter, len);
                        }
                    case 2U /* 0x02U */:
                        {
                            auto& field_prop2 = initField_prop2();
                            COMMS_ASSERT(field_prop2.field_key().getValue() == commonKeyField.getValue());
                            return field_prop2.template readFrom<1>(iter, len);
                        }
                    case 3U /* 0x03U */:
                        {
                            auto& field_prop3 = initField_prop3();
                            COMMS_ASSERT(field_prop3.field_key().getValue() == commonKeyField.getValue());
                            return field_prop3.template readFrom<1>(iter, len);
                        }
                    default:
                        break;
                };

                return comms::ErrorStatus::InvalidMsgData;
            }
            COMMS_MSVC_WARNING_POP

            /// @brief Generated write functionality.
            template <typename TIter>
            comms::ErrorStatus write(TIter& iter, std::size_t len) const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().write(iter, len);
                    case FieldIdx_prop2: return accessField_prop2().write(iter, len);
                    case FieldIdx_prop3: return accessField_prop3().write(iter, len);
                    default: break;
                }

                return comms::ErrorStatus::Success;
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().refresh();
                    case FieldIdx_prop2: return accessField_prop2().refresh();
                    case FieldIdx_prop3: return accessField_prop3().refresh();
                    default: break;
                }

                return false;
            }

            /// @brief Generated length functionality.
            std::size_t length() const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().length();
                    case FieldIdx_prop2: return accessField_prop2().length();
                    case FieldIdx_prop3: return accessField_prop3().length();
                    default: break;
                }

                return 0U;
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().valid();
                    case FieldIdx_prop2: return accessField_prop2().valid();
                    case FieldIdx_prop3: return accessField_prop3().valid();
                    default: break;
                }

                return false;
            }

        private:
            template <std::size_t TIdx, typename TField, typename TFunc>
            static void memFieldDispatch(TField&& f, TFunc&& func)
            {
                #ifdef _MSC_VER
                    func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
                #else // #ifdef _MSC_VER
                    func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
                #endif // #ifdef _MSC_VER
            }
        };

        /// @brief Definition of <b>"Count"</b> field.
        class Count : public
            comms::field::IntValue<
                cc_demo1::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_demo1::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::CountCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props1MembersCommon::CountCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"Props1"</b> field.
    class Props1 : public
        comms::field::ArrayList<
            cc_demo1::field::FieldBase<>,
            typename Props1Members::Property,
            typename TOpt::message::VariantsFields::Props1,
            comms::option::def::HasName,
            comms::option::def::SequenceSizeFieldPrefix<typename Props1Members::Count>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_demo1::field::FieldBase<>,
                typename Props1Members::Property,
                typename TOpt::message::VariantsFields::Props1,
                comms::option::def::HasName,
                comms::option::def::SequenceSizeFieldPrefix<typename Props1Members::Count>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_demo1::message::VariantsFieldsCommon::Props1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Props2 field.
    struct Props2Members
    {
        /// @brief Scope for all the member fields of
        ///     @ref Property field.
        struct PropertyMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref Prop1 field.
            struct Prop1Members
            {
                /// @brief Definition of <b>"Type"</b> field.
                class Type : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<1>,
                        comms::option::def::ValidNumValue<1>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<1>,
                            comms::option::def::ValidNumValue<1>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop1MembersCommon::TypeCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop1MembersCommon::TypeCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_demo1::field::PropRemLen<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::int16_t,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop1MembersCommon::ValCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop1MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Type,
                       Length,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop1"</b> field.
            class Prop1 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop1Members::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop1Members::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop1Members::Type member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop1Members::Length member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop1Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    type,
                    length,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop1Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Prop2 field.
            struct Prop2Members
            {
                /// @brief Definition of <b>"Type"</b> field.
                class Type : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<2>,
                        comms::option::def::ValidNumValue<2>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<2>,
                            comms::option::def::ValidNumValue<2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop2MembersCommon::TypeCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop2MembersCommon::TypeCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_demo1::field::PropRemLen<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint32_t,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop2MembersCommon::ValCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop2MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Type,
                       Length,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop2"</b> field.
            class Prop2 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop2Members::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop2Members::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop2Members::Type member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop2Members::Length member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop2Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    type,
                    length,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop2Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Prop3 field.
            struct Prop3Members
            {
                /// @brief Definition of <b>"Type"</b> field.
                class Type : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue,
                        comms::option::def::DefaultNumValue<3>,
                        comms::option::def::ValidNumValue<3>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName,
                            comms::option::def::FailOnInvalid<>,
                            comms::option::def::FixedValue,
                            comms::option::def::DefaultNumValue<3>,
                            comms::option::def::ValidNumValue<3>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop3MembersCommon::TypeCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop3MembersCommon::TypeCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_demo1::field::PropRemLen<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::String<
                        cc_demo1::field::FieldBase<>,
                        typename TOpt::message::VariantsFields::Props2Members::PropertyMembers::Prop3Members::Val,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::String<
                            cc_demo1::field::FieldBase<>,
                            typename TOpt::message::VariantsFields::Props2Members::PropertyMembers::Prop3Members::Val,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop3MembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Type,
                       Length,
                       Val
                    >;
            };

            /// @brief Definition of <b>"Prop3"</b> field.
            class Prop3 : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename Prop3Members::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename Prop3Members::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop3Members::Type member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop3Members::Length member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop3Members::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    type,
                    length,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::Prop3Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref UnknownProp field.
            struct UnknownPropMembers
            {
                /// @brief Definition of <b>"Type"</b> field.
                class Type : public
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::UnknownPropMembersCommon::TypeCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::UnknownPropMembersCommon::TypeCommon::name();
                    }
                };

                /// @brief Definition of <b>"Length"</b> field.
                using Length =
                    cc_demo1::field::PropRemLen<
                        TOpt,
                        comms::option::def::HasName
                    >;

                /// @brief Definition of <b>"Val"</b> field.
                class Val : public
                    comms::field::ArrayList<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::message::VariantsFields::Props2Members::PropertyMembers::UnknownPropMembers::Val,
                        comms::option::def::HasName
                    >
                {
                    using Base =
                        comms::field::ArrayList<
                            cc_demo1::field::FieldBase<>,
                            std::uint8_t,
                            typename TOpt::message::VariantsFields::Props2Members::PropertyMembers::UnknownPropMembers::Val,
                            comms::option::def::HasName
                        >;
                public:
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::UnknownPropMembersCommon::ValCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Type,
                       Length,
                       Val
                    >;
            };

            /// @brief Definition of <b>"UnknownProp"</b> field.
            class UnknownProp : public
                comms::field::Bundle<
                    cc_demo1::field::FieldBase<>,
                    typename UnknownPropMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::RemLengthMemberField<1U>,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bundle<
                        cc_demo1::field::FieldBase<>,
                        typename UnknownPropMembers::All,
                        comms::option::def::HasName,
                        comms::option::def::RemLengthMemberField<1U>,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bundle class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::UnknownPropMembers::Type member field.
                ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::UnknownPropMembers::Length member field.
                ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
                ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::UnknownPropMembers::Val member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    type,
                    length,
                    val
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyMembersCommon::UnknownPropCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Prop1,
                   Prop2,
                   Prop3,
                   UnknownProp
                >;
        };

        /// @brief Definition of <b>"Property"</b> field.
        class Property : public
            comms::field::Variant<
                cc_demo1::field::FieldBase<>,
                typename PropertyMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasCustomRead,
                comms::option::def::HasCustomWrite,
                comms::option::def::HasCustomRefresh,
                comms::option::def::VariantHasCustomResetOnDestruct,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Variant<
                    cc_demo1::field::FieldBase<>,
                    typename PropertyMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::HasCustomRead,
                    comms::option::def::HasCustomWrite,
                    comms::option::def::HasCustomRefresh,
                    comms::option::def::VariantHasCustomResetOnDestruct,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Default constructor.
            Property() = default;

            /// @brief Destructor
            ~Property()
            {
                reset();
            }

            /// @brief Single member name info entry
            using MemberNameInfo = cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::MemberNameInfo;

            /// @brief Type returned from @ref memberNamesMap() member function.
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::MemberNamesMapInfo.
            using MemberNamesMapInfo = cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::MemberNamesMapInfo;

            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
            ///     related to @b comms::field::Variant class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_prop1 index, @b Field_prop1 type,
            ///         @b initField_prop1(), @b deinitField_prop1() and @b accessField_prop1() access functions -
            ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop1 member field.
            ///     @li @b FieldIdx_prop2 index, @b Field_prop2 type,
            ///         @b initField_prop2(), @b deinitField_prop2() and @b accessField_prop2() access functions -
            ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop2 member field.
            ///     @li @b FieldIdx_prop3 index, @b Field_prop3 type,
            ///         @b initField_prop3(), @b deinitField_prop3() and @b accessField_prop3() access functions -
            ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::Prop3 member field.
            ///     @li @b FieldIdx_unknownProp index, @b Field_unknownProp type,
            ///         @b initField_unknownProp(), @b deinitField_unknownProp() and @b accessField_unknownProp() access functions -
            ///         for cc_demo1::message::VariantsFields::Props2Members::PropertyMembers::UnknownProp member field.
            COMMS_VARIANT_MEMBERS_NAMES(
                prop1,
                prop2,
                prop3,
                unknownProp
            );

            /// @brief Copy constructor.
            Property(const Property& other) :
                Base()
            {
                *this = other;
            }

            /// @brief Move constructor.
            Property(Property&& other) : 
                Base()
            {
                *this = std::move(other);
            }

            /// @brief Copy assignment operator.
            Property& operator=(const Property& other)
            {
                if (this == &other) {
                    return *this;
                }

                reset();

                if (!other.currentFieldValid()) {
                    return *this;
                }

                switch (other.currentField()) {
                    case FieldIdx_prop1: initField_prop1() = other.accessField_prop1(); return *this;
                    case FieldIdx_prop2: initField_prop2() = other.accessField_prop2(); return *this;
                    case FieldIdx_prop3: initField_prop3() = other.accessField_prop3(); return *this;
                    case FieldIdx_unknownProp: initField_unknownProp() = other.accessField_unknownProp(); return *this;
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return *this;
            }

            /// @brief Move assignement operator.
            Property& operator=(Property&& other)
            {    if (this == &other) {
                    return *this;
                }

                reset();

                if (!other.currentFieldValid()) {
                    return *this;
                }

                switch (other.currentField()) {
                    case FieldIdx_prop1: initField_prop1() = std::move(other.accessField_prop1()); return *this;
                    case FieldIdx_prop2: initField_prop2() = std::move(other.accessField_prop2()); return *this;
                    case FieldIdx_prop3: initField_prop3() = std::move(other.accessField_prop3()); return *this;
                    case FieldIdx_unknownProp: initField_unknownProp() = std::move(other.accessField_unknownProp()); return *this;
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return *this;
            }

            /// @brief Equality comparison operator.
            bool operator==(const Property& other) const
            {
                if (this == &other) {
                    return true;
                }

                if (Base::currentFieldValid() != other.currentFieldValid()) {
                    return false;
                }

                if (!Base::currentFieldValid()) {

                    return true;
                }

                if (Base::currentField() != other.currentField()) {
                    return false;
                }

                switch(Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1() == other.accessField_prop1();
                    case FieldIdx_prop2: return accessField_prop2() == other.accessField_prop2();
                    case FieldIdx_prop3: return accessField_prop3() == other.accessField_prop3();
                    case FieldIdx_unknownProp: return accessField_unknownProp() == other.accessField_unknownProp();
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Inequality comparison operator.
            bool operator!=(const Property& other) const
            {
                return !(*this == other);
            }

            /// @brief Order comparison operator.
            bool operator<(const Property& other) const
            {
                if (!Base::currentFieldValid()) {
                    return (!other.currentFieldValid());
                }

                if (!other.currentFieldValid()) {
                    return false;
                }

                if (Base::currentField() < other.currentField()) {
                    return true;
                }

                if (Base::currentField() != other.currentField()) {
                    return false;
                }

                if (this == &other) {
                    return false;
                }
                switch(Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1() < other.accessField_prop1();
                    case FieldIdx_prop2: return accessField_prop2() < other.accessField_prop2();
                    case FieldIdx_prop3: return accessField_prop3() < other.accessField_prop3();
                    case FieldIdx_unknownProp: return accessField_unknownProp() < other.accessField_unknownProp();
                    default: break;
                }

                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Optimized currentFieldExec functionality.
            /// @details Replaces the currentFieldExec() member function defined
            ///    by @b comms::field::Variant.
            template <typename TFunc>
            void currentFieldExec(TFunc&& func) 
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1:
                        memFieldDispatch<FieldIdx_prop1>(accessField_prop1(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop2:
                        memFieldDispatch<FieldIdx_prop2>(accessField_prop2(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop3:
                        memFieldDispatch<FieldIdx_prop3>(accessField_prop3(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_unknownProp:
                        memFieldDispatch<FieldIdx_unknownProp>(accessField_unknownProp(), std::forward<TFunc>(func));
                        break;
                    default:
                        static constexpr bool Invalid_field_execution = false;
                        static_cast<void>(Invalid_field_execution);
                        COMMS_ASSERT(Invalid_field_execution);
                        break;
                }
            }

            /// @brief The same as currentFieldExec() 
            /// @details Generated for backward comatibility, can be removed in the future.
            template <typename TFunc>
            void currFieldExec(TFunc&& func) 
            {
                currentFieldExec(std::forward<TFunc>(func));
            }

            /// @brief Optimized currentFieldExec functionality (const variant).
            /// @details Replaces the currentFieldExec() member function defined
            ///    by @b comms::field::Variant.
            template <typename TFunc>
            void currentFieldExec(TFunc&& func) const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1:
                        memFieldDispatch<FieldIdx_prop1>(accessField_prop1(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop2:
                        memFieldDispatch<FieldIdx_prop2>(accessField_prop2(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_prop3:
                        memFieldDispatch<FieldIdx_prop3>(accessField_prop3(), std::forward<TFunc>(func));
                        break;
                    case FieldIdx_unknownProp:
                        memFieldDispatch<FieldIdx_unknownProp>(accessField_unknownProp(), std::forward<TFunc>(func));
                        break;
                    default:
                        static constexpr bool Invalid_field_execution = false;
                        static_cast<void>(Invalid_field_execution);
                        COMMS_ASSERT(Invalid_field_execution);
                        break;
                }
            }

            /// @brief The same as currentFieldExec()  (const variant)
            /// @details Generated for backward comatibility, can be removed in the future.
            template <typename TFunc>
            void currFieldExec(TFunc&& func) const
            {
                currentFieldExec(std::forward<TFunc>(func));
            }

            /// @brief Optimized runtime selection field functionality.
            /// @details Replaces the selectField() member function defined
            ///    by @b comms::field::Variant.
            void selectField(std::size_t idx)
            {
                if (Base::currentField() == idx) {
                    return;
                }

                reset();
                switch (idx) {
                    case FieldIdx_prop1: initField_prop1(); return;
                    case FieldIdx_prop2: initField_prop2(); return;
                    case FieldIdx_prop3: initField_prop3(); return;
                    case FieldIdx_unknownProp: initField_unknownProp(); return;
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
            }

            /// @brief Optimized reset functionality.
            /// @details Replaces the reset() member function defined
            ///    by @b comms::field::Variant.
            void reset()
            {
                if (!Base::currentFieldValid()) {
                    return;
                }

                switch (Base::currentField()) {
                    case FieldIdx_prop1: deinitField_prop1(); return;
                    case FieldIdx_prop2: deinitField_prop2(); return;
                    case FieldIdx_prop3: deinitField_prop3(); return;
                    case FieldIdx_unknownProp: deinitField_unknownProp(); return;
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
            }

            /// @brief Optimized check ability to write.
            /// @details Replaces the canWrite() member function defined
            ///    by @b comms::field::Variant.
            bool canWrite() const
            {
                if (!Base::currentFieldValid()) {
                    return true;
                }

                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().canWrite();
                    case FieldIdx_prop2: return accessField_prop2().canWrite();
                    case FieldIdx_prop3: return accessField_prop3().canWrite();
                    case FieldIdx_unknownProp: return accessField_unknownProp().canWrite();
                    default: break;
                }
                COMMS_ASSERT(false); // Should not be reached
                return false;
            }

            /// @brief Retrieve name of the member
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::memberName().
            static const char* memberName(std::size_t idx)
            {
                return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::memberName(idx);
            }

            /// @brief Retrieve name of the member
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::memberName().
            static const char* memberName(FieldIdx idx)
            {
                return memberName(static_cast<std::size_t>(idx));
            }

            /// @brief Retrieve map of members names
            /// @see @ref cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::memberNamesMap().
            static MemberNamesMapInfo memberNamesMap()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::memberNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::PropertyCommon::name();
            }

            COMMS_MSVC_WARNING_PUSH
            COMMS_MSVC_WARNING_DISABLE(4702)
            /// @brief Generated read functionality.
            template <typename TIter>
            comms::ErrorStatus read(TIter& iter, std::size_t len)
            {
                reset();
                using CommonKeyField=
                    comms::field::IntValue<
                        cc_demo1::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FailOnInvalid<>,
                        comms::option::def::FixedValue
                    >;
                CommonKeyField commonKeyField;

                auto origIter = iter;
                auto es = commonKeyField.read(iter, len);
                if (es != comms::ErrorStatus::Success) {
                    return es;
                }

                auto consumedLen = static_cast<std::size_t>(std::distance(origIter, iter));
                COMMS_ASSERT(consumedLen <= len);
                len -= consumedLen;

                switch (commonKeyField.getValue()) {
                    case 1U /* 0x01U */:
                        {
                            auto& field_prop1 = initField_prop1();
                            COMMS_ASSERT(field_prop1.field_type().getValue() == commonKeyField.getValue());
                            return field_prop1.template readFrom<1>(iter, len);
                        }
                    case 2U /* 0x02U */:
                        {
                            auto& field_prop2 = initField_prop2();
                            COMMS_ASSERT(field_prop2.field_type().getValue() == commonKeyField.getValue());
                            return field_prop2.template readFrom<1>(iter, len);
                        }
                    case 3U /* 0x03U */:
                        {
                            auto& field_prop3 = initField_prop3();
                            COMMS_ASSERT(field_prop3.field_type().getValue() == commonKeyField.getValue());
                            return field_prop3.template readFrom<1>(iter, len);
                        }
                    default:
                        initField_unknownProp().field_type().setValue(commonKeyField.getValue());
                        return accessField_unknownProp().template readFrom<1>(iter, len);
                };

                return comms::ErrorStatus::InvalidMsgData;
            }
            COMMS_MSVC_WARNING_POP

            /// @brief Generated write functionality.
            template <typename TIter>
            comms::ErrorStatus write(TIter& iter, std::size_t len) const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().write(iter, len);
                    case FieldIdx_prop2: return accessField_prop2().write(iter, len);
                    case FieldIdx_prop3: return accessField_prop3().write(iter, len);
                    case FieldIdx_unknownProp: return accessField_unknownProp().write(iter, len);
                    default: break;
                }

                return comms::ErrorStatus::Success;
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().refresh();
                    case FieldIdx_prop2: return accessField_prop2().refresh();
                    case FieldIdx_prop3: return accessField_prop3().refresh();
                    case FieldIdx_unknownProp: return accessField_unknownProp().refresh();
                    default: break;
                }

                return false;
            }

            /// @brief Generated length functionality.
            std::size_t length() const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().length();
                    case FieldIdx_prop2: return accessField_prop2().length();
                    case FieldIdx_prop3: return accessField_prop3().length();
                    case FieldIdx_unknownProp: return accessField_unknownProp().length();
                    default: break;
                }

                return 0U;
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                switch (Base::currentField()) {
                    case FieldIdx_prop1: return accessField_prop1().valid();
                    case FieldIdx_prop2: return accessField_prop2().valid();
                    case FieldIdx_prop3: return accessField_prop3().valid();
                    case FieldIdx_unknownProp: return accessField_unknownProp().valid();
                    default: break;
                }

                return false;
            }

        private:
            template <std::size_t TIdx, typename TField, typename TFunc>
            static void memFieldDispatch(TField&& f, TFunc&& func)
            {
                #ifdef _MSC_VER
                    func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
                #else // #ifdef _MSC_VER
                    func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
                #endif // #ifdef _MSC_VER
            }
        };

        /// @brief Definition of <b>"Length"</b> field.
        class Length : public
            comms::field::IntValue<
                cc_demo1::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_demo1::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::LengthCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_demo1::message::VariantsFieldsCommon::Props2MembersCommon::LengthCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"Props2"</b> field.
    class Props2 : public
        comms::field::ArrayList<
            cc_demo1::field::FieldBase<>,
            typename Props2Members::Property,
            typename TOpt::message::VariantsFields::Props2,
            comms::option::def::HasName,
            comms::option::def::SequenceSerLengthFieldPrefix<typename Props2Members::Length>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_demo1::field::FieldBase<>,
                typename Props2Members::Property,
                typename TOpt::message::VariantsFields::Props2,
                comms::option::def::HasName,
                comms::option::def::SequenceSerLengthFieldPrefix<typename Props2Members::Length>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_demo1::message::VariantsFieldsCommon::Props2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Props1,
        Props2
    >;
};

/// @brief Definition of <b>"Variants"</b> message class.
/// @details
/// .incTo demonstrate usage of variants fields, this message contains
/// .inca list of heterogatious values implemented using variant field.
/// .incEvery element is a key-value pair. @n
///     See @ref VariantsFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_demo1/message/Variants.h
template <typename TMsgBase, typename TOpt = cc_demo1::options::DefaultOptions>
class Variants : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::Variants,
        comms::option::def::StaticNumIdImpl<cc_demo1::MsgId_Variants>,
        comms::option::def::FieldsImpl<typename VariantsFields<TOpt>::All>,
        comms::option::def::MsgType<Variants<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::Variants,
            comms::option::def::StaticNumIdImpl<cc_demo1::MsgId_Variants>,
            comms::option::def::FieldsImpl<typename VariantsFields<TOpt>::All>,
            comms::option::def::MsgType<Variants<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_props1 index, @b Field_props1 type and @b field_props1() access fuction
    ///         for @ref VariantsFields::Props1 field.
    ///     @li @b FieldIdx_props2 index, @b Field_props2 type and @b field_props2() access fuction
    ///         for @ref VariantsFields::Props2 field.
    COMMS_MSG_FIELDS_NAMES(
        props1,
        props2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 2U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_demo1::message::VariantsCommon::name();
    }
};

} // namespace message

} // namespace cc_demo1
